---- Formatting
SET SERVEROUTPUT ON
SET LINESIZE 170
SET PAGESIZE 50
ALTER SESSION SET NLS_DATE_FORMAT = 'DD/MM/YYYY'; 

---- Column Formatting
COLUMN rank FORMAT 9999 HEADING "Rank"
COLUMN food_id FORMAT 999999 HEADING "Food ID"
COLUMN food_name FORMAT A25 HEADING "Food Name"
COLUMN category_name FORMAT A15 HEADING "Food Category"
COLUMN sales_quantity FORMAT 9999999 HEADING "Sales Quantity"
COLUMN food_price FORMAT 9999999.99 HEADING "Price (USD)"
COLUMN average_price FORMAT 9999999.99 HEADING "Average Price (USD)"
COLUMN price_status FORMAT A15 HEADING "Price Status"
COLUMN total_revenue FORMAT 9999999.99 HEADING "Total Revenue (USD)"
COLUMN contribution_margin FORMAT 999.99 HEADING "Contribution Margin (%)"

---- Title
TTITLE LEFT 'Query Generated On: ' _DATE SKIP 3 CENTER 'Top 10 Highest Grossing Food Items by Revenue: A Two-Year Sales Analysis' SKIP 1 CENTER'====================================================================================' SKIP 2
BREAK ON REPORT
    
---- Query View
CREATE OR REPLACE VIEW TopFoodItems AS
WITH SalesData AS (
    SELECT
        o.order_id,
        o.order_date,
        oi.food_id,
        oi.order_quantity,
        fi.unit_price
    FROM orders o
    JOIN order_item oi 
        ON o.order_id = oi.order_id
    JOIN food_item fi 
        ON oi.food_id = fi.food_id
    WHERE o.order_date >= TO_DATE(SYSDATE - 730, 'DD/MM/YYYY') -- Last 2 years
),
FoodRevenue AS (
    SELECT
        fi.food_id,
        fi.food_name,
        fc.category_name,
        fi.food_price,
        SUM(oi.order_quantity * fi.food_price) AS total_revenue,
        SUM(oi.order_quantity) AS sales_quantity,
        MAX(fi.unit_price) AS unit_cost_price 
    FROM order_item oi
    JOIN food_item fi 
        ON oi.food_id = fi.food_id
    JOIN food_category fc 
        ON fi.category_id = fc.category_id
    GROUP BY fi.food_id, fi.food_name, fc.category_name, fi.food_price
)
SELECT
    RANK() OVER (ORDER BY total_revenue DESC) AS rank,
    food_id AS food_id,
    food_name AS food_name,
    category_name AS category_name,
    sales_quantity AS sales_quantity,
    food_price AS food_price,
    (total_revenue / sales_quantity) AS average_price,
    total_revenue AS total_revenue,
    (((total_revenue - (sales_quantity * unit_cost_price))/total_revenue) * 100)  AS contribution_margin
FROM
    (
        SELECT
            fr.*,
            RANK() OVER (ORDER BY total_revenue DESC) AS revenue_rank
        FROM
            FoodRevenue fr
    )
WHERE
    revenue_rank <= 10;

-- Add the Price_Status column
SELECT 
    rank,
    food_id,
    food_name,
    category_name,
    sales_quantity,
    food_price,
    average_price,
    CASE
        WHEN food_price = average_price THEN 'Stable Pricing'
        ELSE 'Price Variation'
    END AS Price_Status,
    total_revenue,
    contribution_margin
FROM TopFoodItems;

--- Clear formatting
CLEAR COLUMNS
CLEAR BREAKS
CLEAR COMPUTES
TTITLE OFF
